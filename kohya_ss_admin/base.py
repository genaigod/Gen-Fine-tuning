"""
Django settings for kohya_ss_admin project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import json
import os
import time
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zm!l#dgxqp)1lymmdepk%fo6iibk^hzx=rvf)0wr4cu**zkf4o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', '*', '0.0.0.0']
CORS_ALLOWED_ORIGINS = [
    'http://*',
    'https://*',
]
CORS_ALLOW_HEADERS = [
    'x-token',
    '*',
]


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'django_celery_results',
    'apps.api_auth',
    'apps.kohya_ss',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'apps.api_auth.middleware.RedirectIfNotAuthenticatedMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'kohya_ss_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kohya_ss_admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
MEDIA_ROOT = os.path.join(BASE_DIR, 'medias')
MEDIA_URL = '/medias/'


STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#
if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    REST_FRAMEWORK = {
        'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',)
    }





AUTH_USER_MODEL = "api_auth.ApiUser" # app.modelclass

TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_NAME= "sessionid_kohya_ss"
SESSION_COOKIE_PATH = "/"
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 5184000
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

from os.path import dirname, abspath, join as pathJoin

cur_path = dirname(abspath(__file__))
log_path = pathJoin(f"{dirname(cur_path)}{os.sep}{'logs'}")
print(log_path)
if not os.path.exists(log_path): os.mkdir(log_path)
ADMINS = [
    ('Your Name', 'your_email@example.com'),
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] %(process)d %(thread)d '
                      '[%(levelname)s]- %(message)s'
        },
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        'log_error': {
            'handlers': ['error', 'info', 'default'],
            'level': 'DEBUG',
            'propagate': True
        },
        'log_info': {
            'handlers': ['info', 'default'],
            'level': 'DEBUG',
            'propagate': True
        },
    }
}



# redis_host = '10.206.0.3' if os.environ.get("ENV", "prod") != 'dev' else '127.0.0.1'
redis_host = '127.0.0.1'
# redis_pass = 'xxx' if os.environ.get("ENV", "prod") != 'dev' else ''
redis_pass = ''
redis_port = '6381'
redis_user = ''
redis_db = '0'

# django 缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": f'redis://{redis_user}:{redis_pass}@{redis_host}:{redis_port}/{redis_db}',
        "LOCATION": f'redis://:{redis_pass}@{redis_host}:{redis_port}/{redis_db}',
        # "LOCATION": f'redis://{redis_host}:{redis_port}/{redis_db}',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": redis_pass,

        }
    }
}

CELERY_BROKER_URL = f'redis://:{redis_pass}@{redis_host}:{redis_port}/{redis_db}'
BROKER_URL = CELERY_BROKER_URL


CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True
from datetime import timedelta

CELERY_TASK_TIME_LIMIT = 1200
#
# CELERY_RESULT_EXPIRES = 3600 * 24 * 30
import datetime
CELERY_RESULT_EXPIRES = datetime.timedelta(days=30)  # 过期时间为 30 天

CELERY_WORKER_CONCURRENCY = 1




import redis

REDISCLI = redis.Redis(host=redis_host, port=redis_port, password=redis_pass, db=0)

CHECKPOINTS_KEY = "checkpoints_key"
CHECKPOINTS_TITLE_KEY = "checkpoints_title_key"
CHECKPOINTS_ALL_KEY = "checkpoints_all_key"
LORAS_KEY = "loras_key"
LORAS_ALL_KEY = "loras_all_key"
SAMPLERS_KEY = "samplers_key"
SAMPLERS_ALL_KEY = "samplers_all_key"
SEGMENT_ANYTHING_TASK_KEY = "SegmentAnyThingTaskKey"
SEGMENTANYTHING_TASK_RET_KEY = "SegmentAnyThingTaskRetKey"
MAX_QUEUE_NUM = 30
TASKS_END_DAYS = 15


